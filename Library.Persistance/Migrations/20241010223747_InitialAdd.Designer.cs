// <auto-generated />
using System;
using Library.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Persistance.Migrations
{
    [DbContext(typeof(LibraryDBContext))]
    [Migration("20241010223747_InitialAdd")]
    partial class InitialAdd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.20");

            modelBuilder.Entity("Library.Domain.Author", b =>
                {
                    b.Property<Guid>("author_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("author_id");

                    b.Property<DateTime?>("author_birthday")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("author_birthday");

                    b.Property<string>("author_country")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("author_country");

                    b.Property<string>("author_firstname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("author_firstname");

                    b.Property<string>("author_lastname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("author_lastname");

                    b.HasKey("author_id");

                    b.ToTable("authors");
                });

            modelBuilder.Entity("Library.Domain.Book", b =>
                {
                    b.Property<Guid>("book_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("book_id");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("book_ISBN");

                    b.Property<Guid>("author_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("book_description")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("book_descr");

                    b.Property<string>("book_genre")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("book_genre");

                    b.Property<DateTime?>("book_issue_date")
                        .HasColumnType("TEXT")
                        .HasColumnName("book_issue_date");

                    b.Property<DateTime?>("book_issue_expiration_date")
                        .HasColumnType("TEXT")
                        .HasColumnName("book_issue_expiration_date");

                    b.Property<string>("book_name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("book_name");

                    b.HasKey("book_id");

                    b.HasIndex("author_id");

                    b.ToTable("books");
                });

            modelBuilder.Entity("Library.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Library.Domain.Book", b =>
                {
                    b.HasOne("Library.Domain.Author", "author")
                        .WithMany("books")
                        .HasForeignKey("author_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("author");
                });

            modelBuilder.Entity("Library.Domain.Author", b =>
                {
                    b.Navigation("books");
                });
#pragma warning restore 612, 618
        }
    }
}
